<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_laser_mount</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check in view
view = 0
if (point_in_rectangle(x+ox, y+oy, view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0]))
   view = 1
   
dx = lengthdir_x(max_dist,angle)
dy = lengthdir_y(max_dist,angle)
if (point_in_rectangle(x+ox+dx, y+oy+dy, view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0]))
   view = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for interupt
if view = 1
{
    delay -= 1
    
    if delay = 0
    {
        ninterupt1 = 0
        dx = lengthdir_x(draw_dist-5,angle)
        dy = lengthdir_y(draw_dist-5,angle)
        if (collision_line(x+ox,y+oy,x+ox+dx,y+oy+dy,obj_solid,true,true)!= noone)
            ninterupt1 = 1
        
        ninterupt2 = 0
        dx = lengthdir_x(draw_dist,angle)
        dy = lengthdir_y(draw_dist,angle)
        if (collision_point(x+ox+dx,y+oy+dy,obj_solid,true,true)!= noone)
            ninterupt2 = 1
            
        ninterupt3 = 0
        dx = lengthdir_x(draw_dist+5,angle)
        dy = lengthdir_y(draw_dist+5,angle)
        if (collision_point(x+ox+dx,y+oy+dy,obj_solid,true,true)= noone)
            ninterupt3 = 1
    
        if ninterupt1 or ninterupt2 != ointerupt2 or ninterupt3
        {
            col_ship = 0
            draw_dist = 0
            col_dist = 0
            sx = lengthdir_x(max_dist,angle)
            sy = lengthdir_y(max_dist,angle)
            dx = x + ox + sx
            dy = y + oy + sy
            if (collision_line(x+ox,y+oy,dx,dy,obj_solid,1,1) &lt; 0) 
            {
                distance = -1;
            }
            else
            {
                while ((abs(sx) &gt;= 1) || (abs(sy) &gt;= 1)) 
                {
                    sx /= 2;
                    sy /= 2;
                    if (collision_line(x+ox,y+oy,dx,dy,obj_solid,1,1) &lt; 0) 
                    {
                        dx += sx;
                        dy += sy;
                    }
                    else
                    {
                        dx -= sx;
                        dy -= sy;
                    }
                }
                draw_dist = point_distance(x+ox,y+ox,dx,dy);
                col_dist = draw_dist + 5
            }
        }
        
        ointerupt1 = ninterupt1
        ointerupt2 = ninterupt2
        ointerupt3 = ninterupt3
        
        delay = 3
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for ship
if view = 1
{
    if ship = 1 or fire = 1
    {
        dx = lengthdir_x(col_dist,angle)
        dy = lengthdir_y(col_dist,angle)
        if collision_line(x+ox,y+oy,x+ox+dx,y+oy+dy,obj_ship,true,true) = noone
        {
            if ship = 1
            {
                fire_count = count_off
                fire = 0
                ship = 0
            }
        }
        else
        {
            if fire = 1
            {
                with (obj_ship)
                    lose_star()
                ship = 1
                display = 7
                fire = 0
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire
if fire_count = 0
{
    if fire = 0
        fire_count = count_on
        
    if fire = 1
        fire_count = count_off
        
    switch (fire)
    {
        case 0: fire = 1; break;
        case 1: fire = 0; break;
    } 
}

if ship = 0
    fire_count -= 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Alarm
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles
if (view = 1 and fire = 1) or display &gt; 0
{
    dx = lengthdir_x(draw_dist,angle)
    dy = lengthdir_y(draw_dist,angle)
    part_type_color1(Particle,c_red);
    part_emitter_region(PartSystem,PartEmitter,x+dx,x+dx,y+dy,y+dy,0,0);
    part_emitter_burst(PartSystem,PartEmitter,Particle,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intialization
ox = lengthdir_x(3,angle)
oy = lengthdir_y(3,angle)
draw_dist = 0
col_dist = 0
max_dist = 0
display = 0
ship = 0
delay = 2
fire_count = 0
ointerupt1 = 0
ointerupt2 = 0
ointerupt3 = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Max
col_ship = 0
col_obstacle = 0
dx = lengthdir_x(1,angle)
dy = lengthdir_y(1,angle)
while(collision_point(x+ox+dx,y+oy+dy,obj_wall,true,true) = noone)
{
    if col_ship = 0 and collision_point(x+ox+dx,y+oy+dy,obj_ship,true,true) = noone
        draw_dist += 1
    else
        col_ship = 1
        
    if col_obstacle = 0 and collision_point(x+ox+dx,y+oy+dy,obj_obstacle,true,true) = noone
        col_dist += 1
    else
        col_obstacle = 1
        
    max_dist += 1
    dx = lengthdir_x(max_dist,angle)
    dy = lengthdir_y(max_dist,angle)
}
draw_dist -= 1
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle System
cc = c_red

//create particle system
PartSystem = part_system_create()

//create and define particle type
Particle = part_type_create();
part_type_shape(Particle,pt_shape_spark);
part_type_size(Particle,0.1,0.2,0,0);
part_type_scale(Particle,1,1);
part_type_color1(Particle,cc);
part_type_alpha3(Particle,1,1,0);
part_type_speed(Particle,0.40,1,-0.01,0);
part_type_direction(Particle,0,359,0,0);
part_type_gravity(Particle,0,270);
part_type_orientation(Particle,0,0,0,0,1);
part_type_blend(Particle,1);
part_type_life(Particle,10,20);

//create emitter for particle system
PartEmitter = part_emitter_create(PartSystem);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red)

if (fire = 1 and ship = 0 and view = 1) or display &gt; 0
{
    ww = 2
    x1 = x + ox
    x2 = y + oy
    y1 = x + ox + lengthdir_x(draw_dist,angle)
    y2 = y + oy + lengthdir_y(draw_dist,angle)
    draw_set_color(c_red)
    draw_set_alpha(0.05)
    draw_line_width(x1,x2,y1,y2,ww*8)
    draw_line_width(x1,x2,y1,y2,ww*7)
    draw_line_width(x1,x2,y1,y2,ww*6)
    draw_set_alpha(0.1)
    draw_line_width(x1,x2,y1,y2,ww*4)
    draw_line_width(x1,x2,y1,y2,ww*3)
    draw_set_alpha(0.2)
    draw_line_width(x1,x2,y1,y2,ww*2)
    draw_set_alpha(0.3)
    draw_line_width(x1,x2,y1,y2,ww*1.5)
    draw_set_blend_mode(bm_add)
    draw_set_alpha(0.6)
    draw_line_width(x1,x2,y1,y2,ww)
    draw_set_color(c_white)
    draw_set_alpha(0.2)
    draw_line_width(x1,x2,y1,y2,ww/2)
    draw_set_alpha(1)
    draw_set_blend_mode(0)
    
    if display &gt; 0 
        display -= 1
}

draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
