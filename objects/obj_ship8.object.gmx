<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship8</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit
phy_fixed_rotation = 1
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
force = 2000
thrusters_sprite = spr_ship8
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Thruster Properties
i = 0 //Down
thrustProp[i,ikey] = "S"
thrustProp[i,ikey2] = "S"
thrustProp[i,iangle] = 270
thrustProp[i,irot] = 0

i = 1 //Left
thrustProp[i,ikey] = "D"
thrustProp[i,ikey2] = "W"
thrustProp[i,iangle] = 0
thrustProp[i,irot] = 0

i = 2 //Up-Right
thrustProp[i,ikey] = "E"
thrustProp[i,ikey2] = "D"
thrustProp[i,iangle] = 45
thrustProp[i,irot] = 0

i = 3 //Up-Left
thrustProp[i,ikey] = "Q"
thrustProp[i,ikey2] = "A"
thrustProp[i,iangle] = 135
thrustProp[i,irot] = 0

thrusterCount = i
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sliders
if os_type != os_windows or global.androidDebug = 1
{
    if global.controls_type = 0
    {
            with(instance_create(0,0,obj_digital_button))
            {
                sliderProp(0,1) //Down
                drawx = 2560 - 128
                drawy = 32
            }
            with(instance_create(0,0,obj_digital_button))
            {
                sliderProp(1,1) //Left
                drawx = 128
                drawy = 32
            }
            with(instance_create(0,0,obj_digital_button))
            {
                sliderProp(2,1) //Up Right
                drawx = 1568
                drawy = 32
            }
            with(instance_create(0,0,obj_digital_button))
            {
                sliderProp(3,1) //Up Left
                drawx = 992
                drawy = 32
            }
    }
    
    if global.controls_type = 1
    {   
        with(instance_create(0,0,obj_slider_combined_hor))
        {
            sliderProp(3,2)
            drawx = 2560 - 576
            drawy = 32
        }
        
        with(instance_create(0,0,obj_slider_combined_vert))
        {
            sliderProp(0,2)
            drawx = 32
            drawy = 640
        }
    }
    
    if global.controls_type = 2
    {
        with(instance_create(0,0,obj_slider_hor))
        {
            sliderProp(1,1)
            drawx = 64 + (0 *(128 + 512))
            drawy = 32
        }
        with(instance_create(0,0,obj_slider_hor))
        {
            sliderProp(0,1)
            drawx = 64 + (1 *(128 + 512))
            drawy = 32
        } 
        with(instance_create(0,0,obj_slider_hor))
        {
            sliderProp(2,1)
            drawx = 64 + (2 *(128 + 512))
            drawy = 32
        } 
        with(instance_create(0,0,obj_slider_hor))
        {
            sliderProp(3,1)
            drawx = 64 + (3 *(128 + 512))
            drawy = 32
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keygrid
keygrid()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Down
xcomp = lengthdir_x(force*global.thrust[0],270)
ycomp = lengthdir_y(force*global.thrust[0],270)
physics_apply_local_force(x - phy_com_x, y - phy_com_y, xcomp, ycomp)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Left
xcomp = lengthdir_x(force*global.thrust[1],0)
ycomp = lengthdir_y(force*global.thrust[1],0)
physics_apply_local_force(x - phy_com_x, y - phy_com_y, xcomp, ycomp)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Up-Right
xcomp = lengthdir_x(force*global.thrust[2],45)
ycomp = lengthdir_y(force*global.thrust[2],45)
physics_apply_local_force(x - phy_com_x, y - phy_com_y, xcomp, ycomp)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Up-Left
xcomp = lengthdir_x(force*global.thrust[3],135)
ycomp = lengthdir_y(force*global.thrust[3],135)
physics_apply_force(x - phy_com_x, y - phy_com_y, xcomp, ycomp)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard
keyboard()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit
//if (stars &lt;= 1 and collision_counter = 0)
   // phy_fixed_rotation = 0
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Thrusters

draw_sprite_ext(thrusters_sprite,0,x,y,1,1,image_angle,image_blend,image_alpha)

if global.thrust[0] &gt; 0
    draw_sprite_ext(thrusters_sprite,1,x,y,1,1,image_angle,image_blend,image_alpha)
    
if global.thrust[1] &gt; 0
    draw_sprite_ext(thrusters_sprite,2,x,y,1,1,image_angle,image_blend,image_alpha)
    
if global.thrust[2] &gt; 0
    draw_sprite_ext(thrusters_sprite,3,x,y,1,1,image_angle,image_blend,image_alpha)
    
if global.thrust[3] &gt; 0
    draw_sprite_ext(thrusters_sprite,4,x,y,1,1,image_angle,image_blend,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.300000011920929</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>33,33</point>
    <point>97,33</point>
    <point>97,71</point>
    <point>65,102</point>
    <point>33,71</point>
  </PhysicsShapePoints>
</object>
