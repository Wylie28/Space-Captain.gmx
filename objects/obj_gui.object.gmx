<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_ship)
{
    view_xview[0] = obj_ship.x - (view_wview[0]/2)
    view_yview[0] = obj_ship.y - (view_hview[0]/2)
}
global.zoom = global.zoom_start
if global.zone != 4
    global.timer = 0
panx = 0
pany = 0
if global.zone != 4
    time_start = 0
else
    time_start = 1
objective = "ERROR"

draw_fps = 30
dfps = fps
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Position
x = obj_ship.phy_position_x
y = obj_ship.phy_position_y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom
if 0//global.zoom_toggle and instance_exists(obj_ship)
{
    global.zoom_max = 1.35
    zc = .005
    
    zoom_prev = global.zoom
    if obj_ship.phy_speed &gt; 4
        zoom = global.zoom_start + ((global.zoom_max - global.zoom_start) * ((obj_ship.phy_speed - 4) / 20))
    else
        zoom = global.zoom_start
    
    //Normalize
    zoom = (zoom - global.zoom_start)/(global.zoom_max - global.zoom_start)
    //Curve 
    zoom = power(zoom,1.6)
         
    //Denormalize
    zoom = zoom * (global.zoom_max - global.zoom_start) + global.zoom_start
    
    //Check against max zoom rate
    if (zoom_prev &gt; zoom) and (zoom_prev - zoom &gt; zc) and (zoom_prev &gt; zc)
        global.zoom = zoom_prev - zc
    else if (zoom_prev &lt; zoom) and (zoom - zoom_prev &gt; zc) and (zoom_prev &lt; 1 - zc)
        global.zoom = zoom_prev + zc
    else//Commit
        global.zoom = zoom
    
    //Round to 4 decimals
    global.zoom *=  1000
    global.zoom -= frac(global.zoom)
    global.zoom /= 1000
    
    view_wview[0] = 2560 * global.zoom
    view_hview[0] = 1440 * global.zoom
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Panx
if global.pan_toggle and instance_exists(obj_ship)
{
    pc = .005
    pan_max = .35
    min_speed = 4
    max_speed = 20
    pow = 1.6
      
    prev_panx = panx
    
    //Negative
    neg = 1
    if obj_ship.phy_speed_x &lt; 0
        neg = -1
        
    if abs(obj_ship.phy_speed_x) &gt; min_speed
        panx = (pan_max * ((abs(obj_ship.phy_speed_x) - min_speed) / max_speed))
    else
        panx = 0
    
    //Normalize
    panx = (panx)/(pan_max)
    
    //Curve 
    panx = power(panx,pow)
    
    //Denormalize
    panx = panx * (pan_max) * neg
    
    //Check against max zoom rate
    if (prev_panx &gt; panx) and (abs(prev_panx - panx) &gt;  pc)
        panx = prev_panx - pc
    else if (prev_panx &lt; panx) and (abs(panx - prev_panx) &gt; pc)
        panx = prev_panx + pc
    
    //Round to 4 decimals
    panx *=  1000
    panx -= frac(panx)
    panx /= 1000
    
    view_xview[0] = round(obj_ship.phy_position_x - (view_wview[0]/2 - (view_wview[0] * panx)))
}
else
    view_xview[0] = round(obj_ship.phy_position_x - view_wview[0]/2)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pany
if global.pan_toggle and instance_exists(obj_ship)
{
    prev_pany = pany
    
    //Negative
    neg = 1
    if obj_ship.phy_speed_y &lt; 0
        neg = -1
        
    if abs(obj_ship.phy_speed_y) &gt; min_speed
        pany = (pan_max * ((abs(obj_ship.phy_speed_y) - min_speed) / max_speed))
    else
        pany = 0
    
    //Normalize
    pany = (pany)/(pan_max)
    
    //Curve 
    pany = power(pany,pow)
    
    //Denormalize
    pany = pany * (pan_max) * neg
    
    //Check against max zoom rate
    if (prev_pany &gt; pany) and (abs(prev_pany - pany) &gt; pc)
        pany = prev_pany - pc
    else if (prev_pany &lt; pany) and (abs(pany - prev_pany) &gt; pc)
        pany = prev_pany + pc
    
    //Round to 4 decimals
    pany *=  1000
    pany -= frac(pany)
    pany /= 1000

    view_yview[0] = round(obj_ship.phy_position_y - (view_hview[0]/2 - (view_hview[0] * pany * 1.5625)))
}
else
    view_yview[0] = round(obj_ship.phy_position_y - view_hview[0]/2)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer
if time_start = 0
{
    if obj_ship.phy_position_x != shipx or obj_ship.phy_position_y != shipy
        time_start = 1
        
    if instance_exists(obj_energizer)
        if obj_energizer.fire = 1
            time_start = 1
}

if time_start = 1
{
    global.delta = 60/1000000*delta_time
    
    if !instance_exists(obj_win) and !instance_exists(obj_game_over)
    global.timer += 1/60 * global.delta
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if draw_fps &gt; 0
    draw_fps -= 1
    
if draw_fps = 1
{
    draw_fps = 30
    dfps = fps_real
}


instance_deactivate_object(obj_wall)
instance_activate_region(obj_ship.phy_position_x-5000,obj_ship.phy_position_y-5000,10000,10000,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shipx = obj_ship.phy_position_x
shipy = obj_ship.phy_position_y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stars
if global.zone != 0
{
    if global.game_mode = "Normal" or global.game_mode = "Sandbox"
    {
        xview = view_xview[0] + round((2560 - 155 - 32) * global.zoom)
        yview = view_yview[0] + round((50 + 32) * global.zoom)
        scale = .5 * global.zoom
        draw_sprite(spr_star_grid,0,xview,yview)
        
        draw_sprite_ext(spr_star_hollow,0,xview - round(100 * global.zoom),yview,scale,scale,image_angle,image_blend,image_alpha)
        draw_sprite_ext(spr_star_hollow,0,xview,yview,scale,scale,image_angle,image_blend,image_alpha)
        draw_sprite_ext(spr_star_hollow,0,xview + round(100 * global.zoom),yview,scale,scale,image_angle,image_blend,image_alpha)
        
        if obj_ship.stars &gt; 0
            draw_sprite_ext(spr_star_fill,0,xview - round(100 * global.zoom),yview,scale,scale,image_angle,image_blend,image_alpha)    
        if obj_ship.stars &gt; 1
            draw_sprite_ext(spr_star_fill,0,xview,yview,scale,scale,image_angle,image_blend,image_alpha)    
        if obj_ship.stars &gt; 2
            draw_sprite_ext(spr_star_fill,0,xview + round(100 * global.zoom),yview,scale,scale,image_angle,image_blend,image_alpha)
    }
}


if global.zone = 0
{
    xview = view_xview[0] + round((2560 - 155 - 32) * global.zoom)
    yview = view_yview[0] + round((50 + 32) * global.zoom)
    draw_sprite(spr_star_grid,0,xview,yview)
    font_set(font48,fa_center,fa_bottom,c_white)
    draw_text(xview, yview + 32,string(global.hits))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Time
if global.zone != 0
{
    if global.game_mode = "Time Trial"
    {
        if global.timer &gt; 59
        {
            time = string(floor(global.timer/60))
            seconds = global.timer - (real(time) * 60)
            if seconds &gt;= 10
                seconds = string_format(floor(seconds * 100)/100,2,2)
            else
                seconds = "0" + string_format(floor(seconds * 100)/100,2,2)
            time = time + ":" + seconds
        }
        else
        {
            seconds = global.timer
            if seconds &gt;= 10
                seconds = string_format(floor(seconds * 100)/100,2,2)
            else
                seconds = "0" + string_format(floor(seconds * 100)/100,2,2)
            time = seconds
        }
        
        xview = view_xview[0] + round((2560 - 155 - 32) * global.zoom)
        yview = view_yview[0] + round((50 + 32) * global.zoom)
        scale = global.zoom
        draw_sprite(spr_star_grid,0,xview, yview)
        
        font_set(font48,fa_center,fa_middle,c_white)
        draw_text(xview, yview,string(time))
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Objective
if global.zone != 0
{
    if global.targets_hit = global.target_count and global.balls_collected = global.ball_count and global.batteries_charged = global.battery_count
    {
        if distance_to_object(obj_physics_sensor) &gt; 120
            objective = "Navigate to Docking Zone"
        else
        {
            rpercent = floor(obj_physics_sensor.scale * 100)
            if rpercent = 0
                percent = "00"
            else if rpercent &lt; 10
                percent = "0" + string(rpercent)
            else
                percent = string(rpercent)
             objective = "Stop in Docking Zone: " + percent + "%"
        }
    }
    else
    {
        if global.target_count &gt; 0
            objective = "Fire at and Hit Targets: " + string(global.targets_hit) + "/" + string(global.target_count)
        else if global.ball_count &gt; 0
            objective = "Collect Packeges: " + string(global.balls_collected) + "/" + string(global.ball_count)
        else if global.battery_count &gt; 0
            objective = "Charge Batteries: " + string(global.batteries_charged) + "/" + string(global.battery_count)
    }
}
else
    objective = "Fly Aimlessly"
xview = view_xview[0] + round(1280 * global.zoom)
yview = view_yview[0] + round((50 + 32) * global.zoom)
scale = global.zoom
draw_sprite(spr_objective,0,xview, yview)

font_set(font48,fa_center,fa_bottom,c_white)
draw_text(xview, yview + 32,string(objective))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw FPS
font_set(font12,fa_left,fa_middle,c_white)
draw_text(view_xview[0] + 16, view_yview[0] + 16, "FPS = " + string(dfps));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Objective Arrow
if global.zone != 0
    if global.targets_hit != global.target_count or global.balls_collected != global.ball_count or global.batteries_charged != global.battery_count
    {
        if global.target_count &gt; 0
            with(obj_target)
                if image_index = 0
                    Arrow(spr_objective_arrow)
        if global.ball_count &gt; 0
            with(obj_ball)
                    Arrow(spr_pickup_arrow)
        if global.battery_count &gt; 0
            with(obj_battery)
                if charge &lt; cmax
                    Arrow(spr_charge_arrow)
    }
    else
    {
        with(obj_physics_sensor)
        {
            width = 16
            
            if image_index = 0
            {
                //Side of Screen
                if x &lt; view_xview[0]
                    dx = 0 + width
                else if x &gt; view_xview[0] + view_wview[0]
                    dx = view_wview[0] - width
                else
                    dx = x - view_xview[0] + 64
                    
                if y &lt; view_yview[0]
                    dy = 0 + width
                else if y &gt; view_yview[0] + view_hview[0]
                    dy = view_hview[0] - width
                else
                    dy = y - view_yview[0] + 6
                    
                //Bound
                 if dx &lt; width
                    dx = width
                 if dy &lt; width
                    dy = width
                 if dx &gt; view_wview[0] - width
                    dx = view_wview[0] - width
                 if dy &gt; view_hview[0] - width
                    dy = view_hview[0] - width
                    
                //Angle
                if dx = width
                {
                    if dy = width
                        angle = 45
                    else if dy = view_hview[0] - width
                        angle = 45 + 90
                    else
                        angle = 90
                }
                else if dx = view_wview[0] - width
                {
                    if dy = width
                        angle = -45
                    else if dy = view_hview[0] - width
                        angle = -45 - 90
                    else
                        angle = -90
                }
                else
                {
                    if dy = width
                        angle = 0
                    else if dy = view_hview[0] - width
                        angle = 180
                }
                
                //Visible
                if !((bbox_right &gt; view_xview[0]) &amp;&amp; (bbox_left &lt; view_xview[0] + view_wview[0]) &amp;&amp; (bbox_bottom &gt; view_yview[0]) &amp;&amp; (bbox_top &lt; view_yview[0] + view_hview[0]))
                    draw_sprite_ext(spr_docking_arrow,0,view_xview[0] + dx, view_yview[0] + dy,1,1,angle,image_blend,image_alpha)
            }
        }
    }   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
